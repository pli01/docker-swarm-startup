heat_template_version: "2015-10-15"

description: Template that installs two HAProxy server.

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use an Ubuntu based image.
    default: trusty-server-cloudimg-amd64
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
  vol_size:
    type: number
    description: The size of the Cinder root volume for instance
    default: 10
  vol_type:
    type: string
    description: The volume type of the Cinder volume for instance
    default: default
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: my_key

#  dns_nameservers:
#    type: comma_delimited_list
#    label: DNS nameservers
#    description: dns_nameservers=8.8.8.8,8.8.4.4
#  lb_subnet_cidr:
#    type: string
#    default: "192.168.1.0/24"

  floatingip_network_name:
    type: string
  floatingip_id_admin:
    type: string
  floatingip_id_candidat:
    type: string
  front_network:
    type: string
    constraints:
      - {custom_constraint: neutron.network}
  front_subnet:
    type: string
    constraints:
      - {custom_constraint: neutron.subnet}

  ssh_access_cidr:
    type: string
    label: IP range that is permitted to SSH to bastion instance
    description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    default: "192.168.2.2/32"
    constraints:
      - {custom_constraint: net_cidr}

  ssh_authorized_keys:
    type: comma_delimited_list
    label: ssh_authorized_keys
    description: Comma separated list of keypair.
    default: []

  syslog_relay:
    type: string
    label: syslog relay
    description: syslog relay ip
    default: ""

# LB configuration backend
  lb_port_admin:
    type: number
    label: Port number
    description: Port used by the load balancer
    default: 80
  lb_port_candidat:
    type: number
    label: Port number
    description: Port used by the load balancer
    default: 80
  servers_admin:
    type: comma_delimited_list
    label: Servers
    description: Comma separated list of servers in the cluster.
  servers_candidat:
    type: comma_delimited_list
    label: Servers
    description: Comma separated list of servers in the cluster.
  app_port_admin:
    type: number
    label: Port number
    description: Port number to proxy.
    default: 80
  app_port_candidat:
    type: number
    label: Port number
    description: Port number to proxy.
    default: 80
  color:
    type: string
    label: stack color (blue/gren)
    default: blue

resources:
  haproxy_admin:
    type: lb.yaml
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      vol_size: { get_param: vol_size }
      vol_type: { get_param: vol_type }
      ssh_access_cidr: { get_param: ssh_access_cidr }
      ssh_authorized_keys: { get_param: ssh_authorized_keys }
      syslog_relay: { get_param: syslog_relay }
      front_network: { get_param: front_network }
      front_subnet: { get_param: front_subnet }
      floatingip_id: { get_param: floatingip_id_admin }
      lb_port: { get_param: lb_port_admin }
      servers: { get_param: servers_admin }
      app_port: { get_param: app_port_admin }
      color: { get_param: color }

  haproxy_candidat:
    type: lb.yaml
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      vol_size: { get_param: vol_size }
      vol_type: { get_param: vol_type }
      ssh_access_cidr: { get_param: ssh_access_cidr }
      ssh_authorized_keys: { get_param: ssh_authorized_keys }
      syslog_relay: { get_param: syslog_relay }
      front_network: { get_param: front_network }
      front_subnet: { get_param: front_subnet }
      floatingip_id: { get_param: floatingip_id_candidat }
      lb_port: { get_param: lb_port_candidat }
      servers: { get_param: servers_candidat }
      app_port: { get_param: app_port_candidat }
      color: { get_param: color }

outputs:
  admin_name:
    description: Name of the HAProxy instance.
    value: { get_attr: [haproxy_admin, name] }
  admin_ip:
    description: The IP address of the HAProxy instance.
    value: { get_attr: [haproxy_admin, ip] }
  admin_port:
    description: The network port of the HAProxy instance.
    value: { get_attr: [haproxy_admin, port] }
  candidat_name:
    description: Name of the HAProxy instance.
    value: { get_attr: [haproxy_candidat, name] }
  candidat_ip:
    description: The IP address of the HAProxy instance.
    value: { get_attr: [haproxy_candidat, ip] }
  candidat_port:
    description: The network port of the HAProxy instance.
    value: { get_attr: [haproxy_candidat, port] }
